from controller import Robot, DistanceSensor, Motor
import socket
import time
import math
import json

# Network Configuration
ESP32_IP_ADDRESS = "192.168.4.1"
ESP32_PORT = 8080
ESP32_SLAVE = 8081

# Robot Parameters
WHEEL_RADIUS = 0.0205
AXLE_LENGTH = 0.05900

# Grid Configuration
GRID_ROWS = 15
GRID_COLS = 19
GRID_CELL_SIZE = 0.05456
GRID_ORIGIN_X = 0.0452
GRID_ORIGIN_Z = -0.639e-05

GOAL_ROW = 14
GOAL_COL = 0

# Parameters
FORWARD_SPEED = 1.5
LINE_THRESHOLD = 600

# Distance Sensor Parameters
DISTANCE_SENSOR_THRESHOLD = 90
OBSTACLE_DETECTION_ENABLED = True
OBSTACLE_CELL_AHEAD = 1

# Testing/Debug Parameters
OBSTACLE_TEST_MODE = False
TEST_OBSTACLE_INTERVAL = 5.0
last_test_obstacle = 0

# Turning Parameters
TURN_SPEED_FACTOR = 1.2
MIN_INITIAL_SPIN_DURATION = 2.35
MAX_SEARCH_SPIN_DURATION = 4.5
MAX_ADJUST_DURATION = 5.0
TURN_ADJUST_BASE_SPEED = FORWARD_SPEED * 0.8

# Line Centering Parameters
AGGRESSIVE_CORRECTION_DIFFERENTIAL = FORWARD_SPEED * 2.3
MODERATE_CORRECTION_DIFFERENTIAL = FORWARD_SPEED * 2.2

# World grid definition (0 = Black Line, 1 = White Space)
world_grid = [
    [1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
    [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1]
]

# Track detected obstacles
detected_obstacles_grid = set()
recent_new_obstacles = []

# Global variables
planned_path_grid = []
webots_internal_turn_phase = 'NONE'
webots_turn_command_active = None
turn_phase_start_time = 0.0

def world_to_grid(world_x, world_z):
    """Convert world coordinates to grid coordinates"""
    col = round((world_x - GRID_ORIGIN_X) / GRID_CELL_SIZE)
    row = round((world_z - GRID_ORIGIN_Z) / GRID_CELL_SIZE)
    col = max(0, min(col, GRID_COLS - 1))
    row = max(0, min(row, GRID_ROWS - 1))
    return row, col

def grid_to_world_center(row, col):
    """Convert grid coordinates to world coordinates (center of cell)"""
    world_x = GRID_ORIGIN_X + col * GRID_CELL_SIZE
    world_z = GRID_ORIGIN_Z + row * GRID_CELL_SIZE
    return world_x, world_z

def get_line_centered_position(rwp, crgp, ldf):
    """Center robot position on grid cell when sensors detect line"""
    if any(ldf):
        current_row, current_col = crgp
        if 0 <= current_row < GRID_ROWS and 0 <= current_col < GRID_COLS:
            if world_grid[current_row][current_col] == 0:
                grid_center_x, grid_center_z = grid_to_world_center(current_row, current_col)
                return grid_center_x, grid_center_z
            else:
                min_dist = float('inf')
                best_x, best_z = rwp['x'], rwp['z']
                for dr in [-1, 0, 1]:
                    for dc in [-1, 0, 1]:
                        r, c = current_row + dr, current_col + dc
                        if 0 <= r < GRID_ROWS and 0 <= c < GRID_COLS:
                            if world_grid[r][c] == 0:
                                cx, cz = grid_to_world_center(r, c)
                                dist = (cx - rwp['x'])**2 + (cz - rwp['z'])**2
                                if dist < min_dist:
                                    min_dist = dist
                                    best_x, best_z = cx, cz
                return best_x, best_z
    return rwp['x'], rwp['z']

def detect_obstacles_from_distance_sensors(rwp, robot_theta, distance_values):
    """
    Detect obstacles based on distance sensor readings.
    Returns list of grid positions that contain obstacles.
    """
    if not OBSTACLE_DETECTION_ENABLED:
        return []
    
    new_obstacles = []
    sensor_config = [
        {'angle': 0, 'name': 'front'},
        {'angle': math.pi/4, 'name': 'front-left'},
        {'angle': -math.pi/4, 'name': 'front-right'}
    ]
    
    for i, (distance_value, config) in enumerate(zip(distance_values, sensor_config)):
        sensor_name = ['ps5', 'ps7', 'ps0'][i]
        if distance_value > DISTANCE_SENSOR_THRESHOLD:
            print(f"🔍 {config['name']} sensor ({sensor_name}) detected obstacle: {distance_value:.0f} > {DISTANCE_SENSOR_THRESHOLD}")
            sensor_angle = robot_theta + config['angle']
            for cell_distance in range(1, OBSTACLE_CELL_AHEAD + 1):
                obstacle_distance = GRID_CELL_SIZE * cell_distance
                obstacle_x = rwp['x'] + obstacle_distance * math.cos(sensor_angle)
                obstacle_z = rwp['z'] + obstacle_distance * math.sin(sensor_angle)
                obstacle_row, obstacle_col = world_to_grid(obstacle_x, obstacle_z)
                if distance_value > DISTANCE_SENSOR_THRESHOLD:
                    print(f"    🎯 Cell {cell_distance}: World({obstacle_x:.3f}, {obstacle_z:.3f}) -> Grid({obstacle_row}, {obstacle_col})")
                if (0 <= obstacle_row < GRID_ROWS and 0 <= obstacle_col < GRID_COLS):
                    if world_grid[obstacle_row][obstacle_col] == 0:
                        if (obstacle_row, obstacle_col) not in detected_obstacles_grid:
                            new_obstacles.append((obstacle_row, obstacle_col))
                            detected_obstacles_grid.add((obstacle_row, obstacle_col))
                            print(f"🚨 OBSTACLE detected by {config['name']} sensor at grid ({obstacle_row}, {obstacle_col})")
                        else:
                            print(f"    ℹ️  Already detected obstacle at grid ({obstacle_row}, {obstacle_col})")
                    else:
                        print(f"    ⚪ Skipping non-pathable cell at grid ({obstacle_row}, {obstacle_col}) - grid value: {world_grid[obstacle_row][obstacle_col]}")
                else:
                    print(f"    ❌ Out of bounds: grid ({obstacle_row}, {obstacle_col}) not in range [0-{GRID_ROWS-1}, 0-{GRID_COLS-1}]")
    return new_obstacles

# Initialize robot
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# Robot state
rwp = {'x': 0.0, 'z': 0.0, 'theta': 0.0}
prev_left_encoder = 0.0
prev_right_encoder = 0.0
first_odometry = True

# Motors and encoders
left_motor = robot.getDevice('left wheel motor')
right_motor = robot.getDevice('right wheel motor')
left_encoder = robot.getDevice('left wheel sensor')
right_encoder = robot.getDevice('right wheel sensor')

for motor in [left_motor, right_motor]:
    motor.setPosition(float('inf'))
    motor.setVelocity(0.0)

for encoder in [left_encoder, right_encoder]:
    encoder.enable(timestep)

# Ground sensors
gs_wb = []
for name in ['gs0', 'gs1', 'gs2']:
    sensor = robot.getDevice(name)
    sensor.enable(timestep)
    gs_wb.append(sensor)

# Initialize distance sensors
ps = []
psNames = [
    'ps0', 'ps1', 'ps2', 'ps3',
    'ps4', 'ps5', 'ps6', 'ps7'
]

print("\n--- Initializing Distance Sensors ---")
for i in range(8):
    ps.append(robot.getDevice(psNames[i]))
    ps[i].enable(timestep)
    print(f"✓ Distance sensor {psNames[i]} enabled")

distance_sensors = [ps[5], ps[7], ps[0]]
print(f"✓ Using sensors ps5 (front), ps7 (front-left), ps0 (front-right) for obstacle detection")
print(f"✓ Distance threshold: {DISTANCE_SENSOR_THRESHOLD} (raw value)")
print("-" * 40)

# Network variables
client_socket = None
is_connected = False
esp32_command = 'stop'

def connect_to_esp32():
    global client_socket, is_connected
    print(f"Attempting connection to ESP32 at {ESP32_IP_ADDRESS}:{ESP32_PORT}")
    try:
        if client_socket:
            client_socket.close()
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.settimeout(2.0)
        client_socket.connect((ESP32_IP_ADDRESS, ESP32_PORT))
        client_socket.settimeout(0.05)
        is_connected = True
        print("✅ ESP32 connected successfully")
        return True
    except Exception as e:
        print(f"❌ ESP32 connection failed: {e}")
        is_connected = False
        client_socket = None
        return False

# CONFIGURABLE STARTING POSITION
INITIAL_GRID_ROW = 3
INITIAL_GRID_COL = 18

# Set initial position from grid coordinates
rwp['x'], rwp['z'] = grid_to_world_center(INITIAL_GRID_ROW, INITIAL_GRID_COL)
rwp['theta'] = math.pi / 2.0

# Verify position
crgp = world_to_grid(rwp['x'], rwp['z'])
print(f"Robot initialized at grid {crgp}, world ({rwp['x']:.3f}, {rwp['z']:.3f})")
print(f"Target goal: ({GOAL_ROW}, {GOAL_COL})")
print(f"Obstacle detection: {'ENABLED' if OBSTACLE_DETECTION_ENABLED else 'DISABLED'}")
if OBSTACLE_TEST_MODE:
    print(f"🧪 TEST MODE: Will inject artificial obstacles every {TEST_OBSTACLE_INTERVAL}s")
print(f"Distance sensor threshold: {DISTANCE_SENSOR_THRESHOLD} (lower = more sensitive)")

# Coordinate system verification
print("\nCoordinate System Verification:")
print(f"Grid origin: X={GRID_ORIGIN_X}, Z={GRID_ORIGIN_Z}")
print(f"Grid size: {GRID_ROWS}x{GRID_COLS}, Cell size: {GRID_CELL_SIZE}m")

test_positions = [(0,0), (0,16), (14,0), (7,8)]
for row, col in test_positions:
    wx, wz = grid_to_world_center(row, col)
    back_row, back_col = world_to_grid(wx, wz)
    print(f"  Grid ({row},{col}) -> World ({wx:.3f},{wz:.3f}) -> Grid ({back_row},{back_col})")

print("-" * 60)

# Main loop variables
iteration = 0
last_connection_attempt = 0
last_data_send = 0
last_obstacle_check = 0
distance_display_counter = 0
last_test_obstacle = 0

# Main control loop
while robot.step(timestep) != -1:
    if iteration == 0:
        connect_to_esp32()
    
    iteration += 1
    current_time = robot.getTime()

    # Read sensors first (needed for position correction)
    raw_values = [s.getValue() for s in gs_wb]
    line_detected = [1 if v < LINE_THRESHOLD else 0 for v in raw_values]
    left_sensor, center_sensor, right_sensor = line_detected
    
    # Read distance sensors outputs
    psValues = []
    for i in range(8):
        psValues.append(ps[i].getValue())
    
    # Get values for obstacle detection sensors
    distance_values = [psValues[5], psValues[7], psValues[0]]
    
    # Display distance sensor values every 10 iterations
    if OBSTACLE_DETECTION_ENABLED:
        distance_display_counter += 1
        if distance_display_counter >= 10:
            distance_display_counter = 0
            print(f"📏 Distance Sensors - Front: {distance_values[0]:.0f}, "
                  f"Front-Left: {distance_values[1]:.0f}, "
                  f"Front-Right: {distance_values[2]:.0f} (threshold: {DISTANCE_SENSOR_THRESHOLD})")
            
            detection_status = []
            front_obstacle = distance_values[0] > DISTANCE_SENSOR_THRESHOLD
            left_obstacle = distance_values[1] > DISTANCE_SENSOR_THRESHOLD
            right_obstacle = distance_values[2] > DISTANCE_SENSOR_THRESHOLD
            
            if front_obstacle:
                detection_status.append(f"FRONT({distance_values[0]:.0f})")
            if left_obstacle:
                detection_status.append(f"LEFT({distance_values[1]:.0f})")
            if right_obstacle:
                detection_status.append(f"RIGHT({distance_values[2]:.0f})")
            
            if detection_status:
                print(f"⚠️  Obstacle detection: {' + '.join(detection_status)}")
            else:
                print(f"✅ No obstacles detected")
            
            if recent_new_obstacles:
                print(f"🔄 Pending obstacles to send: {len(recent_new_obstacles)}")
            
            if front_obstacle:
                print(f"⚠️  Front sensor detecting obstacle! Raw value: {distance_values[0]:.0f}")
            if left_obstacle:
                print(f"⚠️  Front-Left sensor detecting obstacle! Raw value: {distance_values[1]:.0f}")
            if right_obstacle:
                print(f"⚠️  Front-Right sensor detecting obstacle! Raw value: {distance_values[2]:.0f}")

    # Update odometry
    if not first_odometry:
        left_value = left_encoder.getValue()
        right_value = right_encoder.getValue()
        
        left_diff = left_value - prev_left_encoder
        right_diff = right_value - prev_right_encoder
        
        distance = (left_diff * WHEEL_RADIUS + right_diff * WHEEL_RADIUS) / 2.0
        rotation = (right_diff * WHEEL_RADIUS - left_diff * WHEEL_RADIUS) / AXLE_LENGTH
        
        rwp['x'] += distance * math.cos(rwp['theta'] + rotation / 2.0)
        rwp['z'] += distance * math.sin(rwp['theta'] + rotation / 2.0)
        rwp['theta'] = math.atan2(math.sin(rwp['theta'] + rotation), 
                                  math.cos(rwp['theta'] + rotation))
        
        prev_left_encoder = left_value
        prev_right_encoder = right_value
    else:
        prev_left_encoder = left_encoder.getValue()
        prev_right_encoder = right_encoder.getValue()
        first_odometry = False
    
    # Update grid position
    new_grid_pos = world_to_grid(rwp['x'], rwp['z'])
    if new_grid_pos != crgp:
        crgp = new_grid_pos
        if 0 <= crgp[0] < GRID_ROWS and 0 <= crgp[1] < GRID_COLS:
            grid_value = world_grid[crgp[0]][crgp[1]]
            if (grid_value == 0 and not any(line_detected)) or (grid_value == 1 and any(line_detected)):
                print(f"Position mismatch at grid {crgp}: Grid expects {'BLACK' if grid_value == 0 else 'WHITE'}, "
                      f"sensors detect {'LINE' if any(line_detected) else 'NO LINE'}")

    # Detect obstacles periodically
    if current_time - last_obstacle_check > 0.2:
        if OBSTACLE_DETECTION_ENABLED:
            new_obstacles = detect_obstacles_from_distance_sensors(rwp, rwp['theta'], distance_values)
            if new_obstacles:
                print(f"🚧 {len(new_obstacles)} new obstacles detected!")
                recent_new_obstacles.extend(new_obstacles)
        last_obstacle_check = current_time
    
    # Test mode: inject artificial obstacles for debugging
    if OBSTACLE_TEST_MODE and current_time - last_test_obstacle > TEST_OBSTACLE_INTERVAL:
        test_obstacle_row = crgp[0] + 2
        test_obstacle_col = crgp[1]
        if (0 <= test_obstacle_row < GRID_ROWS and 0 <= test_obstacle_col < GRID_COLS and
            (test_obstacle_row, test_obstacle_col) not in detected_obstacles_grid):
            print(f"🧪 TEST MODE: Injecting artificial obstacle at ({test_obstacle_row}, {test_obstacle_col})")
            recent_new_obstacles.append((test_obstacle_row, test_obstacle_col))
            detected_obstacles_grid.add((test_obstacle_row, test_obstacle_col))
            last_test_obstacle = current_time

    # Handle ESP32 connection
    if not is_connected:
        if current_time - last_connection_attempt > 3.0:
            connect_to_esp32()
            last_connection_attempt = current_time
        left_motor.setVelocity(0.0)
        right_motor.setVelocity(0.0)
        continue

    # Motor control
    left_speed, right_speed = 0.0, 0.0

    # Send data to ESP32
    if current_time - last_data_send > 0.1:
        try:
            data = {
                'type': 'webots_status',
                'robot_grid_pos': list(crgp),
                'goal_grid_pos': [GOAL_ROW, GOAL_COL],
                'world_pose': {
                    'x': round(rwp['x'], 3),
                    'z': round(rwp['z'], 3),
                    'theta_rad': round(rwp['theta'], 3)
                },
                'sensors_binary': line_detected,
                'detected_obstacles': recent_new_obstacles.copy()
            }
            client_socket.sendall((json.dumps(data) + '\n').encode('utf-8'))
            last_data_send = current_time
            
            if recent_new_obstacles:
                print(f"📤 Sent {len(recent_new_obstacles)} obstacles to ESP32")
                recent_new_obstacles.clear()
        except Exception as e:
            print(f"Send error: {e}")
            is_connected = False
            if client_socket:
                client_socket.close()
                client_socket = None
            continue
    
    # Receive commands from ESP32
    try:
        response = client_socket.recv(1024)
        if response:
            for message in response.decode('utf-8').strip().split('\n'):
                if not message.strip():
                    continue
                try:
                    esp_data = json.loads(message)
                    if esp_data.get('type') == 'esp32_command':
                        new_command = esp_data.get('action', 'stop')
                        if (new_command != esp32_command and 
                            esp32_command in ['turn_left', 'turn_right'] and 
                            new_command not in ['turn_left', 'turn_right']):
                            webots_internal_turn_phase = 'NONE'
                            webots_turn_command_active = None
                        esp32_command = new_command
                        planned_path_grid = esp_data.get('path', planned_path_grid)
                        
                        algorithm = esp_data.get('algorithm', 'Unknown')
                        if iteration % 100 == 0:
                            print(f"📍 Using {algorithm} algorithm for path planning")
                except json.JSONDecodeError as e:
                    print(f"JSON error: {e}")
                except Exception as e:
                    print(f"Processing error: {e}")
    except socket.timeout:
        pass
    except Exception as e:
        print(f"Receive error: {e}")
        is_connected = False
        if client_socket:
            client_socket.close()

    # Motor control
    left_speed, right_speed = 0.0, 0.0

    if esp32_command not in ['turn_left', 'turn_right'] and webots_internal_turn_phase != 'NONE':
        webots_internal_turn_phase = 'NONE'
        webots_turn_command_active = None

    if esp32_command == 'stop':
        left_speed, right_speed = 0.0, 0.0
        webots_internal_turn_phase = 'NONE'
        webots_turn_command_active = None
        
    elif esp32_command == 'forward':
        webots_internal_turn_phase = 'NONE'
        webots_turn_command_active = None
        base_speed = FORWARD_SPEED
        
        if not left_sensor and center_sensor and not right_sensor:
            left_speed, right_speed = base_speed, base_speed
        elif left_sensor and center_sensor and not right_sensor:
            left_speed, right_speed = base_speed - MODERATE_CORRECTION_DIFFERENTIAL, base_speed
        elif not left_sensor and center_sensor and right_sensor:
            left_speed, right_speed = base_speed, base_speed - MODERATE_CORRECTION_DIFFERENTIAL
        elif left_sensor and not center_sensor and not right_sensor:
            left_speed, right_speed = base_speed - AGGRESSIVE_CORRECTION_DIFFERENTIAL, base_speed
        elif not left_sensor and not center_sensor and right_sensor:
            left_speed, right_speed = base_speed, base_speed - AGGRESSIVE_CORRECTION_DIFFERENTIAL
        elif left_sensor and center_sensor and right_sensor:
            left_speed, right_speed = base_speed * 0.7, base_speed * 0.7
        elif not any(line_detected):
            left_speed, right_speed = base_speed * 0.2, base_speed * 0.2
        else:
            left_speed, right_speed = base_speed * 0.3, base_speed * 0.3

    elif esp32_command in ['turn_left', 'turn_right']:
        if webots_turn_command_active != esp32_command or webots_internal_turn_phase == 'NONE':
            webots_turn_command_active = esp32_command
            webots_internal_turn_phase = 'INITIATE_SPIN'
            turn_phase_start_time = current_time
            print(f"Turn {esp32_command} initiated")

        if webots_internal_turn_phase == 'INITIATE_SPIN':
            spin_in = -FORWARD_SPEED * TURN_SPEED_FACTOR * 0.7
            spin_out = FORWARD_SPEED * TURN_SPEED_FACTOR * 1.0
            left_speed, right_speed = (spin_in, spin_out) if webots_turn_command_active == 'turn_left' else (spin_out, spin_in)
            
            if current_time - turn_phase_start_time > MIN_INITIAL_SPIN_DURATION:
                webots_internal_turn_phase = 'SEARCHING_LINE'
                turn_phase_start_time = current_time
                
        elif webots_internal_turn_phase == 'SEARCHING_LINE':
            search_in = -FORWARD_SPEED * TURN_SPEED_FACTOR * 0.4
            search_out = FORWARD_SPEED * TURN_SPEED_FACTOR * 0.8
            left_speed, right_speed = (search_in, search_out) if webots_turn_command_active == 'turn_left' else (search_out, search_in)
            
            line_acquired = (center_sensor or 
                           (webots_turn_command_active == 'turn_left' and left_sensor and not right_sensor) or 
                           (webots_turn_command_active == 'turn_right' and right_sensor and not left_sensor))
            
            if line_acquired:
                webots_internal_turn_phase = 'ADJUSTING_ON_LINE'
                turn_phase_start_time = current_time
                print(f"Line acquired during {webots_turn_command_active}")
            elif current_time - turn_phase_start_time > MAX_SEARCH_SPIN_DURATION:
                print(f"Turn timeout - stopping")
                webots_internal_turn_phase = 'NONE'
                left_speed, right_speed = 0, 0
                
        elif webots_internal_turn_phase == 'ADJUSTING_ON_LINE':
            base = TURN_ADJUST_BASE_SPEED
            mod_diff = MODERATE_CORRECTION_DIFFERENTIAL * (base / FORWARD_SPEED)
            agg_diff = AGGRESSIVE_CORRECTION_DIFFERENTIAL * (base / FORWARD_SPEED)
            
            if not left_sensor and center_sensor and not right_sensor:
                left_speed, right_speed = base * 0.5, base * 0.5
            elif left_sensor and center_sensor and not right_sensor:
                left_speed, right_speed = base - mod_diff, base
            elif not left_sensor and center_sensor and right_sensor:
                left_speed, right_speed = base, base - mod_diff
            elif left_sensor and not center_sensor and not right_sensor:
                left_speed, right_speed = base - agg_diff, base
            elif not left_sensor and not center_sensor and right_sensor:
                left_speed, right_speed = base, base - agg_diff
            elif not any(line_detected):
                print(f"Line lost during adjustment - searching again")
                webots_internal_turn_phase = 'SEARCHING_LINE'
                turn_phase_start_time = current_time
            else:
                left_speed, right_speed = base * 0.7, base * 0.7
                
            if current_time - turn_phase_start_time > MAX_ADJUST_DURATION:
                print(f"Adjustment timeout - stopping")
                webots_internal_turn_phase = 'NONE'
                left_speed, right_speed = 0, 0

    # Apply motor velocities
    left_motor.setVelocity(left_speed)
    right_motor.setVelocity(right_speed)
    
    # Status logging
    if iteration % 25 == 0:
        connection_status = "Connected" if is_connected else "Disconnected"
        sensor_status = "ON LINE" if any(line_detected) else "NO LINE"
        obstacles_str = f"Obstacles: {len(detected_obstacles_grid)}" if detected_obstacles_grid else "No obstacles"
        print(f"Time: {current_time:.1f}s | ESP32: {connection_status} | Command: {esp32_command} | "
              f"Grid: {crgp} | {sensor_status} {line_detected} | {obstacles_str}")

# Cleanup
if client_socket:
    try:
        client_socket.close()
    except:
        pass

print("\nSimulation ended")
print(f"Total obstacles detected: {len(detected_obstacles_grid)}")
if detected_obstacles_grid:
    print("Obstacle positions:", list(detected_obstacles_grid))
print("Controller finished")
